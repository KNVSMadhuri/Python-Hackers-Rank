# In 3.5 calculating average 
S = int(input())
K = set(map(int,input().split()))
average = sum(K)/len(K)
print(average)
# In 2.7 calculating average
S = int(input())
K = set(map(int,input().split()))
average = sum(K)/float(len(K))
print(average)

#There is an array of  integers. There are also  disjoint sets,  and , each containing  integers. You like all the integers in set  and dislike all the integers in set . Your initial happiness is . For each  integer in the array, if , you add  to your happiness. If , you add  to your happiness. Otherwise, your happiness does not change. Output your final happiness at the end.

Note: Since  and  are sets, they have no repeated elements. However, the array might contain duplicate elements.

n,m = raw_input().split()
arr = [int(x) for x in raw_input().split()]
A = set([int(y) for y in raw_input().split()])
B = set([int(z) for z in raw_input().split()])
count = [0+1 if x in A else 0-1 if x in B else 0+0 for x in arr]
print(sum(count))
# Reading in Sets using s.add reading vertically
s=set() 
n=int(input())
for i in range(0,n): 
    s.add(input()) 
print(len(s))
#Reading in sets without using s.add.
print(len(set([str(input()) for x in range(int(input()))])))

#N commands N inputs in sets
n = int(input())
s = set(map(int, input().split())) 
cmds = int(input())

for i in range(cmds):
    line = input().split()
    if line[0] == 'pop': 
        s.pop()
    if line[0] == 'remove':
        s.remove(int(line[1]))
    if line[0] == 'discard': 
        s.discard(int(line[1]))

print(sum(s))

#union 

A,B = raw_input(),set(map(int,raw_input().split()))
C,D = raw_input(),set(map(int,raw_input().split()))
print(len(B.union(D)))

#Intersection

A,B = input(),set(map(int,input().split()))
C,D = input(),set(map(int,input().split()))
print(len(B.intersection(D)))
